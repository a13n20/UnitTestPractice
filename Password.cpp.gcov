        -:    0:Source:Password.cpp
        -:    0:Graph:Password.gcno
        -:    0:Data:Password.gcda
        -:    0:Runs:3
        -:    1:#include "Password.h"
        -:    2:#include <string>
        -:    3:
        -:    4:using std::string;
        -:    5:
        -:    6:/*
        -:    7:constructor sets the default password to "ChicoCA-95929"
        -:    8:*/
       81:    9:Password::Password()
        -:   10:{
       81:   11:  pass_history.push_back("ChicoCA-95929");
       81:   12:}
        -:   13:
        -:   14:/*
        -:   15:  The function receives a string counts how many times the same character
        -:   16:  occurs at the beginning of the string, before any other characters (or the
        -:   17:  end of the string). The function is case-sensitive so 'Z' is different than
        -:   18:  'z' and any ASCII characters are allowed.
        -:   19:*/
       51:   20:int Password::count_leading_characters(string phrase)
        -:   21:{
       51:   22:  int repetition = 1;
       51:   23:  int index = 0;
       51:   24:  if (phrase.length() == 0)
        -:   25:  {
        3:   26:    return 0;
        -:   27:  }
       75:   28:  while (index < phrase.length() && phrase[index] == phrase[index + 1])
        -:   29:  {
       27:   30:    repetition++;
       27:   31:    index++;
        -:   32:  }
       48:   33:  return repetition;
        -:   34:}
        -:   35:
       27:   36:bool Password::has_mixed_case(string phrase)
        -:   37:{
       27:   38:  bool lower = false;
       27:   39:  bool upper = false;
       27:   40:  int index = 0;
        -:   41:
      297:   42:  while (index < phrase.length())
        -:   43:  {
      270:   44:    if (isupper(phrase[index]))
        -:   45:    {
       63:   46:      upper = true;
        -:   47:    }
      270:   48:    if (islower(phrase[index]))
        -:   49:    {
      111:   50:      lower = true;
        -:   51:    }
      270:   52:    index++;
        -:   53:  }
        -:   54:
       27:   55:  return (lower && upper);
        -:   56:}
        -:   57:
        -:   58:/*
        -:   59:receives a password and sets the latest in pass_history to it if and only
        -:   60:if it meets all criteria:
        -:   61:  1. The password is at least 8 letters long, but no longer than 20
        -:   62:  2. It has no more than 3 of the same leading characters
        -:   63:  3. It has mixed case (at least one upper case and at least one lower case)
        -:   64:  4. It was not a previous password in the history
        -:   65:*/
        6:   66:void Password::set(string newPass)
        -:   67:{
        6:   68:  if (newPass.length() >= 8 && newPass.length() <= 20)
        -:   69:  {
       3*:   70:    if (count_leading_characters(newPass) <= 3 && has_mixed_case(newPass) == true)
        -:   71:    {
        6:   72:      for (int i = 0; i < pass_history.size(); ++i)
        -:   73:      {
        3:   74:        if (pass_history[i] == newPass)
        -:   75:        {
    #####:   76:          return;
        -:   77:        }
        -:   78:      }
        3:   79:      pass_history.push_back(newPass);
        -:   80:    }
        -:   81:  }
        -:   82:}
        -:   83:
        -:   84:/*
        -:   85:receives a string and authenticates it against the latest password in the
        -:   86:pass_history, returning true for an exact match or false when it does not match
        -:   87:or if a password has not been set.
        -:   88:*/
        9:   89:bool Password::authenticate(string phrase)
        -:   90:{
        9:   91:  if (phrase == pass_history[pass_history.size() - 1])
        -:   92:  {
        6:   93:    return true;
        -:   94:  }
        -:   95:  else
        -:   96:  {
        3:   97:    return false;
        -:   98:  }
        -:   99:}
